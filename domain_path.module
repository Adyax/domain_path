<?php

/**
 * @file
 *  Path alias handling for multiple domains.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\domain\DomainInterface;
use Drupal\domain\DomainNegotiator;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function domain_path_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['domain'])) {
    //$form['domain']['#group'] = 'additional_settings';
  }

  $form['domain_path'] = [
    '#tree' => TRUE,
    '#title' => t('Domain-specific paths'),
    '#type' => 'details',
    '#group' => 'additional_settings',
    //'#access' => user_access('edit domain paths'),
  ];

  $domains = \Drupal::service('domain.loader')->loadMultipleSorted();
  $current = t('<none>');

  $nid = FALSE;
  $node = $form_state->getFormObject()->getEntity();
  $langcode = NULL;
  if ($node) {
    $nid = $node->id();
    $current = \Drupal::service('path.alias_manager')->getAliasByPath("/node/$nid");
    $langcode = $node->get('langcode')->value;
  }

  $form['domain_path']['current'] = [
    '#type' => 'item',
    '#title' => t('Current alias'),
    '#markup' => Html::escape($current),
    '#weight' => -5,
  ];

  $show_delete = FALSE;
  $domain_path_loader = \Drupal::service('domain_path.loader');

  foreach ($domains as $domain_id => $domain) {
    $path = FALSE;
    $properties = [
      'entity_id' => $nid,
      'language' => $langcode,
      'domain_id' => $domain_id,
      'entity_type' => 'node',
    ];
    if ($nid && $domain_paths = $domain_path_loader->loadByProperties($properties)) {
      foreach ($domain_paths as $domain_path) {
        $path = $domain_path->get('alias')->value;
      }
    }

    $default = '';
    if ($path) {
      $show_delete = TRUE;
    }

    $form['domain_path'][$domain_id] = [
      '#type' => 'textfield',
      '#title' => Html::escape($domain->getPath()),
      '#default_value' => $path ? $path : $default,
      //'#access' => user_access('edit domain paths'),
    ];
  }
  $form['domain_path']['domain_path_delete'] = [
    '#type' => 'checkbox',
    '#title' => t('Delete domain-specific aliases'),
    '#default_value' => FALSE,
    '#access' => $show_delete,
    '#weight' => -1,
  ];

  if (!empty($form['actions'])) {
    foreach (array_keys($form['actions']) as $action) {
      if (isset($form['actions'][$action]['#submit'])) {
        array_unshift($form['actions'][$action]['#submit'], '_domain_path_node_form_submit');
      }
    }
  }
}

/**
 * Custom submit for node form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _domain_path_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $domain_path_values = $form_state->getValue('domain_path');

  /*if (empty($node->domain_path)) {
    return;
  }*/

  // If not set to revert, then save changes.
  if (empty($domain_path_values['domain_path_delete'])) {
    $paths = [];
    $domain_path_loader = \Drupal::service('domain_path.loader');
    unset($domain_path_values['current']);
    unset($domain_path_values['domain_path_delete']);
    $langcode = $node->get('langcode')->value;
    $entity_type = 'node';
    $nid = $node->id();
    foreach ($domain_path_values as $domain_id => $alias) {
      $properties = [
        'entity_id' => $nid,
        'language' => $langcode,
        'domain_id' => $domain_id,
        'entity_type' => $entity_type,
        //'alias' => $alias,
      ];
      $create_new = FALSE;
      $path = $domain_path_loader->loadByProperties($properties);
      if (!$path) {
        $create_new = TRUE;
        $path = [];
      }

      // Set the path alias.
      $path['alias'] = $alias;

      // Fill in missing pieces.
      $path += [
        'domain_id' => $domain_id,
        'source' => "node/$nid",
        'language' => $langcode,
        'entity_type' => $entity_type,
        'entity_id' => $nid,
      ];

      // Save the paths.
      if ($create_new) {
        $domain_path_storage = $domain_path_loader->getStorage();
        $domain_path_entity = $domain_path_storage->create(['type' => 'domain_path']);
        foreach ($path as $field => $value) {
          $domain_path_entity->set($field, $value);
        }
        $domain_path_entity->save();
      }

      // Delete old alias if user erased it.
      /*if (!empty($path['dpid']) && empty($path['alias'])) {
        domain_path_path_delete($path['dpid']);
      }
      elseif (!empty($path['alias'])) {
        $paths[$domain_id] = $path;
      }*/
    }
  }
  // Reverted delete all domain path aliases.
//  else {
//    domain_path_node_delete($node);
//  }
//  if (isset($node->end) && isset($node->start)) {
//    if ($node->start > $node->end) {
//      form_set_error('time', t('An event may not end before it starts.'));
//    }
//  }
}

/**
 * Implements hook_domain_request_alter().
 *
 * The logic in this function gives us the following matches for a request to
 * foo.example.com.
 *
 *   'foo.*'
 *   '*.example.com'
 *   'foo.*.com'
 *   'foo.example.*'
 *   '*.foo.example.com'
 *   'foo.example.com.*'
 *
 * These patterns should be sufficient for most conditions.
 */
function domain_path_domain_request_alter(DomainInterface &$domain) {
  // If an exact match has loaded, do nothing.
  if ($domain->getMatchType() == DomainNegotiator::DOMAIN_MATCH_EXACT) {
  //  return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    // You can get nid and anything else you need from the node object.
    $nid = $node->id();
    print_r($nid);
    //$domain->setRedirect($redirect);
    return new \Symfony\Component\HttpFoundation\RedirectResponse('/node/2');
  }

  // If no exact match, then run the alias load routine.
/*  $hostname = $domain->getHostname();
  $alias_loader = \Drupal::service('domain_alias.loader');
  $domain_loader = \Drupal::service('domain.loader');

  if ($alias = $alias_loader->loadByHostname($hostname)) {
    if ($domain = $domain_loader->load($alias->getDomainId())) {
      $domain->addProperty('alias', $alias);
      $domain->setMatchType(DomainNegotiator::DOMAIN_MATCH_ALIAS);
      $redirect = $alias->getRedirect();
      if (!empty($redirect)) {
        $domain->setRedirect($redirect);
      }
    }
  }*/
}
