<?php

/**
 * @file
 *  Path alias handling for multiple domains.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_type_alter().
 *
 * @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[]
 */
function domain_path_entity_type_alter(array &$entity_types) {
  // Override default pathauto_pattern entity default form class.
  if (!empty($entity_types['pathauto_pattern'])) {
    $entity_types['pathauto_pattern']->setFormClass('default', '\Drupal\domain_path\Form\DomainPathPatternEditForm');
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function domain_path_field_widget_info_alter(&$widgets) {
  if (!empty($widgets['path'])) {
    $widgets['path']['class'] = '\Drupal\domain_path\DomainPathPathautoWidget';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function domain_path_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'field_widget_info_alter') {
    // Move domain_path_field_widget_info_alter() to the end of the list.
    $group = $implementations['domain_path'];
    unset($implementations['domain_path']);
    $implementations['domain_path'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function domain_path_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //TODO: refactor this function later
  $form_object = $form_state->getFormObject();
  if (!method_exists($form_object, 'getEntity')) {
    return;
  }

  $config = \Drupal::config('domain_path.settings');
  $enabled_entity_types = $config->get('entity_types');
  $enabled_entity_types = array_filter($enabled_entity_types);
  if ($enabled_entity_types) {

    $entity = $form_object->getEntity();
    $entity_type = $entity->getEntityTypeId();
    $entity_bundle = $entity->bundle();
    $form_id_pattern = $entity_type . '_' . $entity_bundle . '_';
    foreach (array_keys($enabled_entity_types) as $enabled_entity_type) {
      if ($entity_type == $enabled_entity_type && strpos($form_id, $form_id_pattern) !== FALSE) {
        if (!empty($form['actions'])) {
          foreach (array_keys($form['actions']) as $action) {
            if (isset($form['actions'][$action]['#submit'])) {
              $form['actions'][$action]['#submit'][] = '_domain_path_entity_form_submit';
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function domain_path_entity_delete(EntityInterface $entity) {
  _domain_path_delete_domain_path_entities($entity);
}

/**
 * Implements hook_entity_translation_delete().
 */
function domain_path_entity_translation_delete(EntityInterface $translation) {
  _domain_path_delete_domain_path_entities($translation);
}

/**
 * Helper function for deleting domain path entities.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function _domain_path_delete_domain_path_entities(EntityInterface $entity) {
  $entity_type = $entity->getEntityTypeId();

  if ($entity_type == 'node') {
    $domain_path_loader = \Drupal::service('domain_path.loader');
    $properties_map = [
      'entity_type' => $entity_type,
      'entity_id' => $entity->id(),
      'language' => $entity->language(),
    ];

    $domain_path_entities = $domain_path_loader->loadByProperties($properties_map);

    if ($domain_path_entities) {
      foreach ($domain_path_entities as $domain_path_entity) {
        $domain_path_entity->delete();
      }
    }
  }
}

/**
 * Custom submit for entity form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _domain_path_entity_form_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $entity_id = $entity->id();
  $langcode = $entity->get('langcode')->value;
  $entity_type = $entity->getEntityTypeId();
  $properties = [
    'entity_id' => $entity_id,
    'language' => $langcode,
    'entity_type' => $entity_type,
  ];

  $path_values = $form_state->getValue('path');
  $domain_path_values = isset($path_values[0]['domain_path']) ? $path_values[0]['domain_path'] : [];

  $domain_path_loader = \Drupal::service('domain_path.loader');

  // If not set to revert, then save changes.
  if (empty($domain_path_values['domain_path_delete'])) {
    unset($domain_path_values['domain_path_delete']);
    foreach ($domain_path_values as $domain_id => $alias) {
      $properties['domain_id'] = $domain_id;
      $domain_path_entity_data = $domain_path_loader->loadByProperties($properties);

      if (!$alias) {
        if ($domain_path_entity_data) {
          $domain_path_entity_for_delete = reset($domain_path_entity_data);
          $domain_path_entity_for_delete->delete();
        }
        continue;
      }

      $properties_map = [
        'alias' => $alias,
        'domain_id' => $domain_id,
        'language' => $langcode,
        'entity_type' => $entity_type,
        'entity_id' => $entity_id,
      ];

      if (!$domain_path_entity_data) {
        $domain_path_storage = $domain_path_loader->getStorage();
        $domain_path_entity = $domain_path_storage->create(['type' => 'domain_path']);
        foreach ($properties_map as $field => $value) {
          $domain_path_entity->set($field, $value);
        }
        $domain_path_entity->save();
      }
      else {
        $domain_path_entity = reset($domain_path_entity_data);
        if ($domain_path_entity->get('alias')->value != $alias) {
          $domain_path_entity->set('alias', $alias);
          $domain_path_entity->save();
        }
      }
    }
  }
  else {
    // Delete all domain path aliases.
    $domain_path_entities = $domain_path_loader->loadByProperties($properties);
    foreach ($domain_path_entities as $domain_path_entity) {
      $domain_path_entity->delete();
    }
  }
}
